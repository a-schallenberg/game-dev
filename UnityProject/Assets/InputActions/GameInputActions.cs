//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActions/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using UnityEditor;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""BuildMenu"",
            ""id"": ""4ff64ea1-3b0b-4742-a4c0-ebb1bf810edf"",
            ""actions"": [
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""4811d4e2-9018-4805-87a8-47254f817263"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""83068465-2f9f-42b5-8694-ef7cf779bfbb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""921f7e09-2424-4b50-95cf-0410d4f16c67"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""f7444b6a-fcf5-4efc-8445-99e24c8688db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HardClose"",
                    ""type"": ""Button"",
                    ""id"": ""251c0474-be44-4538-b9aa-f0b426925470"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7ad70ca2-bcec-4f7a-9b5d-a5c2f44d9321"",
                    ""path"": ""<Keyboard>/Enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0f8f212-fedc-4db3-93c0-5c8fb909850a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12e0fcf7-f954-4f34-83cf-1f0341e6d5b7"",
                    ""path"": ""<Keyboard>/Escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a263561-0764-4a7e-a3cc-58a4ffcdfa8e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1896fac1-e0fd-4b27-8f05-f0b46cd0873d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efa1b607-41c6-41af-8923-3a1e41789975"",
                    ""path"": ""<Keyboard>/Escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61cfa30b-61fb-4c04-880d-b6d6f185fea1"",
                    ""path"": ""<Keyboard>/B"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HardClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Game"",
            ""id"": ""5998d237-1948-4d00-ba0d-78a5d9dc33d4"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""1e767169-7147-4e94-8765-3aff7a8e32b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""785de981-987a-402a-8c96-6ff4d0fbc760"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BuildMenu"",
                    ""type"": ""Button"",
                    ""id"": ""4c69f4af-6920-44ce-b686-0c74316bb0ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""82aada8c-f1bb-4e5f-8c4b-715455021f07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f7a6f25e-9b34-43a2-b181-829cd8729dd9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cb82e378-9dea-454f-a86a-2e50344f0524"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a5a95558-cebc-43cf-adde-9c1b6c088277"",
                    ""path"": ""<Keyboard>/W"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""835aac2f-526f-4c71-88ef-bb736bb19cae"",
                    ""path"": ""<Keyboard>/S"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9fe39397-0b75-4de2-866c-fc1508993154"",
                    ""path"": ""<Keyboard>/A"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a347c758-c7e3-48ed-8655-c5ce004200a0"",
                    ""path"": ""<Keyboard>/D"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6456c52b-799d-4f5c-826a-ad7d92092177"",
                    ""path"": ""<Keyboard>/B"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""BuildMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bdefea8-8e74-4f75-835b-3b8733124af1"",
                    ""path"": ""<Keyboard>/E"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseMenu"",
            ""id"": ""58ad6830-0eb0-4896-9b6b-bdfe4229bc4e"",
            ""actions"": [
                {
                    ""name"": ""Resume"",
                    ""type"": ""Button"",
                    ""id"": ""ecc22374-e60d-4ab9-9b9e-4730fd6f2e86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d1b01cd-b328-4e77-8a46-1960961593fa"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SIMenu"",
            ""id"": ""de1ce2d2-5018-4f10-b0f4-5d19694720ab"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""4ae0024a-d78a-48b6-acb7-c648db6585b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d14c1e9-c975-4b69-b756-5080c2612ae8"",
                    ""path"": ""<Keyboard>/Escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // BuildMenu
        m_BuildMenu = asset.FindActionMap("BuildMenu", throwIfNotFound: true);
        m_BuildMenu_Submit = m_BuildMenu.FindAction("Submit", throwIfNotFound: true);
        m_BuildMenu_Cancel = m_BuildMenu.FindAction("Cancel", throwIfNotFound: true);
        m_BuildMenu_MousePosition = m_BuildMenu.FindAction("MousePosition", throwIfNotFound: true);
        m_BuildMenu_Close = m_BuildMenu.FindAction("Close", throwIfNotFound: true);
        m_BuildMenu_HardClose = m_BuildMenu.FindAction("HardClose", throwIfNotFound: true);
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Pause = m_Game.FindAction("Pause", throwIfNotFound: true);
        m_Game_Movement = m_Game.FindAction("Movement", throwIfNotFound: true);
        m_Game_BuildMenu = m_Game.FindAction("BuildMenu", throwIfNotFound: true);
        m_Game_Interaction = m_Game.FindAction("Interaction", throwIfNotFound: true);
        // PauseMenu
        m_PauseMenu = asset.FindActionMap("PauseMenu", throwIfNotFound: true);
        m_PauseMenu_Resume = m_PauseMenu.FindAction("Resume", throwIfNotFound: true);
        // SIMenu
        m_SIMenu = asset.FindActionMap("SIMenu", throwIfNotFound: true);
        m_SIMenu_Close = m_SIMenu.FindAction("Close", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BuildMenu
    private readonly InputActionMap m_BuildMenu;
    private IBuildMenuActions m_BuildMenuActionsCallbackInterface;
    private readonly InputAction m_BuildMenu_Submit;
    private readonly InputAction m_BuildMenu_Cancel;
    private readonly InputAction m_BuildMenu_MousePosition;
    private readonly InputAction m_BuildMenu_Close;
    private readonly InputAction m_BuildMenu_HardClose;
    public struct BuildMenuActions
    {
        private @GameInputActions m_Wrapper;
        public BuildMenuActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Submit => m_Wrapper.m_BuildMenu_Submit;
        public InputAction @Cancel => m_Wrapper.m_BuildMenu_Cancel;
        public InputAction @MousePosition => m_Wrapper.m_BuildMenu_MousePosition;
        public InputAction @Close => m_Wrapper.m_BuildMenu_Close;
        public InputAction @HardClose => m_Wrapper.m_BuildMenu_HardClose;
        public InputActionMap Get() { return m_Wrapper.m_BuildMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildMenuActions set) { return set.Get(); }
        public void SetCallbacks(IBuildMenuActions instance)
        {
            if (m_Wrapper.m_BuildMenuActionsCallbackInterface != null)
            {
                @Submit.started -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnSubmit;
                @Submit.performed -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnSubmit;
                @Submit.canceled -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnSubmit;
                @Cancel.started -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnCancel;
                @MousePosition.started -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnMousePosition;
                @Close.started -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnClose;
                @Close.performed -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnClose;
                @Close.canceled -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnClose;
                @HardClose.started -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnHardClose;
                @HardClose.performed -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnHardClose;
                @HardClose.canceled -= m_Wrapper.m_BuildMenuActionsCallbackInterface.OnHardClose;
            }
            m_Wrapper.m_BuildMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @Close.started += instance.OnClose;
                @Close.performed += instance.OnClose;
                @Close.canceled += instance.OnClose;
                @HardClose.started += instance.OnHardClose;
                @HardClose.performed += instance.OnHardClose;
                @HardClose.canceled += instance.OnHardClose;
            }
        }
    }
    public BuildMenuActions @BuildMenu => new BuildMenuActions(this);

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_Pause;
    private readonly InputAction m_Game_Movement;
    private readonly InputAction m_Game_BuildMenu;
    private readonly InputAction m_Game_Interaction;
    public struct GameActions
    {
        private @GameInputActions m_Wrapper;
        public GameActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Game_Pause;
        public InputAction @Movement => m_Wrapper.m_Game_Movement;
        public InputAction @BuildMenu => m_Wrapper.m_Game_BuildMenu;
        public InputAction @Interaction => m_Wrapper.m_Game_Interaction;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_GameActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnPause;
                @Movement.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMovement;
                @BuildMenu.started -= m_Wrapper.m_GameActionsCallbackInterface.OnBuildMenu;
                @BuildMenu.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnBuildMenu;
                @BuildMenu.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnBuildMenu;
                @Interaction.started -= m_Wrapper.m_GameActionsCallbackInterface.OnInteraction;
                @Interaction.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnInteraction;
                @Interaction.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnInteraction;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @BuildMenu.started += instance.OnBuildMenu;
                @BuildMenu.performed += instance.OnBuildMenu;
                @BuildMenu.canceled += instance.OnBuildMenu;
                @Interaction.started += instance.OnInteraction;
                @Interaction.performed += instance.OnInteraction;
                @Interaction.canceled += instance.OnInteraction;
            }
        }
    }
    public GameActions @Game => new GameActions(this);

    // PauseMenu
    private readonly InputActionMap m_PauseMenu;
    private IPauseMenuActions m_PauseMenuActionsCallbackInterface;
    private readonly InputAction m_PauseMenu_Resume;
    public struct PauseMenuActions
    {
        private @GameInputActions m_Wrapper;
        public PauseMenuActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Resume => m_Wrapper.m_PauseMenu_Resume;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void SetCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterface != null)
            {
                @Resume.started -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnResume;
                @Resume.performed -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnResume;
                @Resume.canceled -= m_Wrapper.m_PauseMenuActionsCallbackInterface.OnResume;
            }
            m_Wrapper.m_PauseMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Resume.started += instance.OnResume;
                @Resume.performed += instance.OnResume;
                @Resume.canceled += instance.OnResume;
            }
        }
    }
    public PauseMenuActions @PauseMenu => new PauseMenuActions(this);

    // SIMenu
    private readonly InputActionMap m_SIMenu;
    private ISIMenuActions m_SIMenuActionsCallbackInterface;
    private readonly InputAction m_SIMenu_Close;
    public struct SIMenuActions
    {
        private @GameInputActions m_Wrapper;
        public SIMenuActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_SIMenu_Close;
        public InputActionMap Get() { return m_Wrapper.m_SIMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SIMenuActions set) { return set.Get(); }
        public void SetCallbacks(ISIMenuActions instance)
        {
            if (m_Wrapper.m_SIMenuActionsCallbackInterface != null)
            {
                @Close.started -= m_Wrapper.m_SIMenuActionsCallbackInterface.OnClose;
                @Close.performed -= m_Wrapper.m_SIMenuActionsCallbackInterface.OnClose;
                @Close.canceled -= m_Wrapper.m_SIMenuActionsCallbackInterface.OnClose;
            }
            m_Wrapper.m_SIMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Close.started += instance.OnClose;
                @Close.performed += instance.OnClose;
                @Close.canceled += instance.OnClose;
            }
        }
    }
    public SIMenuActions @SIMenu => new SIMenuActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IBuildMenuActions
    {
        void OnSubmit(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnClose(InputAction.CallbackContext context);
        void OnHardClose(InputAction.CallbackContext context);
    }
    public interface IGameActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnBuildMenu(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
    }
    public interface IPauseMenuActions
    {
        void OnResume(InputAction.CallbackContext context);
    }
    public interface ISIMenuActions
    {
        void OnClose(InputAction.CallbackContext context);
    }
}
